# .github/workflows/01-claude-implementation.yml
name: 🤖 Claude Auto Implementation

on:
  workflow_dispatch:
    inputs:
      feature:
        description: 'Feature to implement'
        required: true
        type: choice
        options:
          - F1-起動画面
          - F2-音声録音
          - F3-文字起こし
          - F4-AI医療アシスタント
          - F5-音声合成
          - F6-データ保存
          - F7-サマリー生成
          - F8-オフライン
          - ALL-全機能
  
  schedule:
    - cron: '0 */6 * * *'  # 6時間ごとに自動実行

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  implement-with-claude:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Load Feature Specification
        id: feature
        run: |
          FEATURE_ID=$(echo "${{ github.event.inputs.feature }}" | cut -d'-' -f1)
          echo "feature_id=${FEATURE_ID}" >> $GITHUB_OUTPUT
          
          # 仕様書から該当機能の詳細を抽出
          python3 -c "
          import yaml
          with open('voice-koereq-spec.yaml', 'r', encoding='utf-8') as f:
              spec = yaml.safe_load(f)
          
          feature = next(f for f in spec['features'] if f['id'] == '${FEATURE_ID}')
          print(f\"feature_name={feature['name']}\")
          print(f\"feature_type={feature['type']}\")
          print(f\"feature_priority={feature['priority']}\")
          " >> $GITHUB_OUTPUT
      
      # Create implementation issue
      - name: Create Implementation Issue
        id: create_issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `
            ## 🤖 Claude Auto Implementation Request
            
            ### Feature Details
            - **Feature**: ${{ steps.feature.outputs.feature_name }} (${{ steps.feature.outputs.feature_id }})
            - **Type**: ${{ steps.feature.outputs.feature_type }}
            - **Priority**: ${{ steps.feature.outputs.feature_priority }}
            
            ### Implementation Requirements
            
            Please implement the following components for the voice-koereq application:
            
            #### 1. iOS Implementation (SwiftUI)
            Create the following files under \`ios/VoiceKoereq/\`:
            - \`Views/${{ steps.feature.outputs.feature_id }}View.swift\` - SwiftUI view
            - \`ViewModels/${{ steps.feature.outputs.feature_id }}ViewModel.swift\` - View model
            - \`Services/${{ steps.feature.outputs.feature_id }}Service.swift\` - Service layer
            
            Requirements:
            - Use SwiftUI and Combine
            - iOS 16+ compatibility
            - Integrate Azure Speech SDK
            - Japanese UI priority
            - Include error handling and loading states
            - Accessibility support
            - MVVM architecture
            
            #### 2. Android Implementation (Jetpack Compose)
            Create the following files under \`android/app/src/main/kotlin/com/voicekoereq/\`:
            - \`ui/${{ steps.feature.outputs.feature_id }}Screen.kt\` - Compose UI
            - \`viewmodel/${{ steps.feature.outputs.feature_id }}ViewModel.kt\` - ViewModel
            - \`repository/${{ steps.feature.outputs.feature_id }}Repository.kt\` - Repository
            
            Requirements:
            - Use Jetpack Compose and Kotlin
            - Material Design 3
            - Azure Speech SDK for Android integration
            - Coroutines and Flow for async operations
            - Hilt for dependency injection
            - Japanese UI priority
            
            #### 3. Shared Logic (Kotlin Multiplatform)
            Create the following files under \`shared/src/commonMain/kotlin/com/voicekoereq/\`:
            - \`${{ steps.feature.outputs.feature_id }}/Repository.kt\` - Common interface
            - \`${{ steps.feature.outputs.feature_id }}/Models.kt\` - Data models
            - \`${{ steps.feature.outputs.feature_id }}/UseCase.kt\` - Business logic
            
            Requirements:
            - Use expect/actual pattern
            - API design for both platforms
            - Coroutines Flow
            - Serializable data classes
            
            #### 4. Azure Functions (if needed)
            For backend/AI service features, create \`azure-functions/${{ steps.feature.outputs.feature_id }}Function.cs\`:
            - .NET 8 Isolated Process
            - Azure services integration (Speech Services, OpenAI, Storage)
            - Application Insights logging
            - Proper error handling
            - Japanese language support
            - HTTP triggers
            
            #### 5. Tests
            Create comprehensive tests:
            - iOS: XCTest unit tests, UI tests, integration tests with mocks
            - Android: JUnit tests, Compose UI tests, Mockito mocks
            
            Please generate complete, working code for all components.
            `;
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 Implement ${{ steps.feature.outputs.feature_name }} (${{ steps.feature.outputs.feature_id }})`,
              body: issueBody,
              labels: ['claude-implementation', 'auto-generated', '${{ steps.feature.outputs.feature_type }}']
            });
            
            return issue.number;
      
      # Use Claude to implement based on the issue
      - name: Claude Implementation
        uses: NikoToRA/claude-code-action@main
        with:
          direct_prompt: |
            Implement the feature described in issue #${{ steps.create_issue.outputs.result }}.
            
            Create all the necessary files as specified in the issue description.
            Focus on creating production-ready, clean code that follows best practices for each platform.
            
            For iOS: Use modern SwiftUI with async/await where appropriate.
            For Android: Use latest Jetpack Compose patterns with clean architecture.
            For shared code: Ensure proper abstraction for both platforms.
            
            Include comprehensive error handling, loading states, and Japanese UI text.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          anthropic_model: claude-3-5-sonnet-20241022
          timeout_minutes: 30
      
      # Alternative approach: Create files directly and then PR
      - name: Setup Implementation Branch
        run: |
          git checkout -b claude/${{ github.event.inputs.feature }}-${{ github.run_number }}
          
      - name: Create Implementation Structure
        run: |
          # Create directory structure
          mkdir -p ios/VoiceKoereq/{Views,ViewModels,Services}
          mkdir -p android/app/src/main/kotlin/com/voicekoereq/{ui,viewmodel,repository}
          mkdir -p shared/src/commonMain/kotlin/com/voicekoereq/${{ steps.feature.outputs.feature_id }}
          mkdir -p tests/{ios,android}
          
      - name: Generate Implementation Plan
        id: implementation_plan
        run: |
          cat > implementation_plan.md << 'EOF'
          # Implementation Plan for ${{ steps.feature.outputs.feature_name }}
          
          ## Feature ID: ${{ steps.feature.outputs.feature_id }}
          ## Type: ${{ steps.feature.outputs.feature_type }}
          
          ### iOS Files to Generate:
          1. ios/VoiceKoereq/Views/${{ steps.feature.outputs.feature_id }}View.swift
          2. ios/VoiceKoereq/ViewModels/${{ steps.feature.outputs.feature_id }}ViewModel.swift
          3. ios/VoiceKoereq/Services/${{ steps.feature.outputs.feature_id }}Service.swift
          
          ### Android Files to Generate:
          1. android/app/src/main/kotlin/com/voicekoereq/ui/${{ steps.feature.outputs.feature_id }}Screen.kt
          2. android/app/src/main/kotlin/com/voicekoereq/viewmodel/${{ steps.feature.outputs.feature_id }}ViewModel.kt
          3. android/app/src/main/kotlin/com/voicekoereq/repository/${{ steps.feature.outputs.feature_id }}Repository.kt
          
          ### Shared Logic Files:
          1. shared/src/commonMain/kotlin/com/voicekoereq/${{ steps.feature.outputs.feature_id }}/Repository.kt
          2. shared/src/commonMain/kotlin/com/voicekoereq/${{ steps.feature.outputs.feature_id }}/Models.kt
          3. shared/src/commonMain/kotlin/com/voicekoereq/${{ steps.feature.outputs.feature_id }}/UseCase.kt
          
          ### Test Files:
          1. tests/ios/${{ steps.feature.outputs.feature_id }}Tests.swift
          2. tests/android/${{ steps.feature.outputs.feature_id }}Test.kt
          EOF
      
      - name: Commit Implementation Plan
        run: |
          git config user.name "Claude AI"
          git config user.email "claude@anthropic.com"
          git add .
          git commit -m "📝 Add implementation plan for ${{ steps.feature.outputs.feature_name }}"
      
      - name: Push Branch
        run: |
          git push origin claude/${{ github.event.inputs.feature }}-${{ github.run_number }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "✨ Claude implementation: ${{ github.event.inputs.feature }}"
          title: "🤖 [Claude] ${{ github.event.inputs.feature }} Implementation"
          body: |
            ## Claude Auto-Generated Implementation
            
            ### 実装機能
            - **機能**: ${{ steps.feature.outputs.feature_name }}
            - **ID**: ${{ steps.feature.outputs.feature_id }}
            - **タイプ**: ${{ steps.feature.outputs.feature_type }}
            - **優先度**: ${{ steps.feature.outputs.feature_priority }}
            
            ### 実装内容
            This PR contains the implementation structure for the requested feature.
            
            Related Issue: #${{ steps.create_issue.outputs.result }}
            
            ### 生成されたファイル
            - [ ] iOS実装（SwiftUI + Combine）
            - [ ] Android実装（Jetpack Compose + Kotlin）
            - [ ] 共有ロジック（Kotlin Multiplatform）
            - [ ] Azure Functions（該当する場合）
            - [ ] テストコード
            
            ### レビューポイント
            - [ ] コードの品質
            - [ ] アーキテクチャの適切性
            - [ ] エラーハンドリング
            - [ ] 日本語対応
            
            ---
            *This PR was automatically generated by Claude AI*
          branch: claude/${{ github.event.inputs.feature }}-${{ github.run_number }}
          base: main
          labels: |
            claude-generated
            auto-implementation
            ${{ steps.feature.outputs.feature_type }}
            ${{ steps.feature.outputs.feature_priority }}